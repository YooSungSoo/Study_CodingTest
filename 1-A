// 백준 2309번 일곱 난쟁이(브론즈1) 

// next_permutation 순열 접근

#include<bits/stdc++.h>

/*
using namespace std;

int main(void){
	
int a[9], b[7]; 
	
	for(int i=0;i<9;i++){
	
	cin >> a[i];
	}

	sort(a,a+9);

	do{
		int sum = 0;
		for(int i=0;i<7;i++) sum += a[i];
		
		if(sum==0) break;
	}while(next_permutation(a,a+9));

	for(int i =0;i<7;i++){
		cout << a[i] << endl;
	}
	return 0;
}
*/

// 재귀함수 접근

using namespace std;

int a[9];
int n =9,r=7;
	
void solve(){
	int sum = 0;
	for(int i =0;i<r;i++){
		sum += a[i];
		}

	if(sum==100){
		sort(a,a+7);
		for(int i=0;i<r;i++){
			cout << a[i] << endl;
		}
		exit(0);
	}
}

void print(){
	for(int i=0;i<r;i++){
		cout << a[i] << " ";
		cout << endl;
	}
}

void makePermutation(int n,int r, int depth){
	if(r==depth){
		solve();
		return;
	}
	for(int i= depth; i<n;i++){
		swap(a[i],a[depth]);
		makePermutation(n,r,depth+1);
		swap(a[i],a[depth]);
	}
	return;
}

int main(void){
	for(int i=0;i<n;i++){
		cin >> a[i];
	}
	void makePermutation(int n,int r,int depth);
	makePermutation(n,r,0);

return 0;
} 
